# .github/workflows/main.yml
name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U django_user -d django_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      POSTGRES_USER: django_user
      POSTGRES_PASSWORD: django_password
      POSTGRES_DB: django_db
      DB_HOST: 127.0.0.1
      DB_PORT: "5432"
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip setuptools
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r requirements.txt

      - name: Lint & test backend
        working-directory: backend
        run: |
          python -m flake8 .
          python manage.py test

  frontend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install deps
        working-directory: frontend
        run: npm ci

      - name: Test frontend
        working-directory: frontend
        run: npm test

  build_backend_and_push:
    name: Push backend Docker image
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: lesstalkrus/kittygram_backend:latest

  build_frontend_and_push:
    name: Push frontend Docker image
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: lesstalkrus/kittygram_frontend:latest

  build_gateway_and_push:
    name: Push gateway Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push gateway
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: lesstalkrus/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push
      - build_frontend_and_push
      - build_gateway_and_push

    steps:
      - name: Check out repo (for compose file)
        uses: actions/checkout@v3

      - name: Copy docker-compose.production.yml to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "kittygram"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -e
            cd kittygram
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate --noinput
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput
            sudo docker compose -f docker-compose.production.yml exec backend sh -c "cp -r /app/collected_static/. /backend_static/static/"

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Telegram notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Kittygram: деплой успешно выполнен."
